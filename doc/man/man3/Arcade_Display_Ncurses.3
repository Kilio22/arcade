.TH "Arcade::Display::Ncurses" 3 "Fri Apr 3 2020" "Version 1.0" "Arcade" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Arcade::Display::Ncurses \- Libncurses library\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Ncurses\&.hpp>\fP
.PP
Inherits \fBArcade::Display::ADisplayModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBreset\fP () final"
.br
.RI "Resets the library\&. "
.ti -1c
.RI "void \fBopen\fP () final"
.br
.RI "Opens / initializes the window\&. "
.ti -1c
.RI "void \fBclose\fP () final"
.br
.RI "Close / destroy the window\&. "
.ti -1c
.RI "bool \fBisOpen\fP () const final"
.br
.RI "Check window status\&. "
.ti -1c
.RI "bool \fBswitchToNextLib\fP () const final"
.br
.RI "Checks whether you need to change the current display library\&. "
.ti -1c
.RI "bool \fBswitchToPreviousLib\fP () const final"
.br
.RI "Checks whether you need to change the current display library\&. "
.ti -1c
.RI "bool \fBswitchToNextGame\fP () const final"
.br
.RI "Checks whether you need to change the current game library\&. "
.ti -1c
.RI "bool \fBswitchToPreviousGame\fP () const final"
.br
.RI "Checks whether you need to change the current game library\&. "
.ti -1c
.RI "bool \fBshouldBeRestarted\fP () const final"
.br
.RI "Checks whether you need to restart the current game\&. "
.ti -1c
.RI "bool \fBshouldGoToMenu\fP () const final"
.br
.RI "Checks whether you need to go back to the menu\&. "
.ti -1c
.RI "bool \fBshouldExit\fP () const final"
.br
.RI "Checks whether you need to exit the program\&. "
.ti -1c
.RI "bool \fBisKeyPressed\fP (\fBIDisplayModule::Keys\fP key) const final"
.br
.RI "Checks whether the current key is being pressed\&. "
.ti -1c
.RI "bool \fBisKeyPressedOnce\fP (\fBIDisplayModule::Keys\fP key) const final"
.br
.RI "Checks whether the current key was pressed during the last frame\&. "
.ti -1c
.RI "float \fBgetDelta\fP () const final"
.br
.RI "Gets the number of frames since last update\&. "
.ti -1c
.RI "void \fBclear\fP () const final"
.br
.RI "Clears the canvas\&. \fBCall this after the \fBIDisplayModule::update\fP method\&.\fP "
.ti -1c
.RI "void \fBupdate\fP () final"
.br
.RI "Runs an update over the events that occured\&. \fBCall this before the \fBIDisplayModule::clear\fP method\&.\fP "
.ti -1c
.RI "void \fBrender\fP () const final"
.br
.RI "Renders the canvas\&. "
.ti -1c
.RI "char \fBgetKeyCode\fP () const final"
.br
.RI "Gets the last pressed character from the keyboard\&. "
.ti -1c
.RI "void \fBsetColor\fP (\fBIDisplayModule::Colors\fP color) final"
.br
.RI "Defines the color of the elements that will be drawn\&. "
.ti -1c
.RI "void \fBputPixel\fP (float x, float y) const final"
.br
.RI "Displays a pixel\&. "
.ti -1c
.RI "void \fBputLine\fP (float x1, float y1, float x2, float y2) const final"
.br
.RI "Displays a line\&. "
.ti -1c
.RI "void \fBputRect\fP (float x, float y, float w, float h) const final"
.br
.RI "Displays a rectangle\&. "
.ti -1c
.RI "void \fBputFillRect\fP (float x, float y, float w, float h) const final"
.br
.RI "Displays a filled rectangle\&. "
.ti -1c
.RI "void \fBputCircle\fP (float x, float y, float rad) const final"
.br
.RI "Displays a cirle\&. "
.ti -1c
.RI "void \fBputFillCircle\fP (float x, float y, float rad) const final"
.br
.RI "Displays a filled cirle\&. "
.ti -1c
.RI "void \fBputText\fP (const std::string &text, unsigned int size, float x, float y) const final"
.br
.RI "Displays text\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Detailed Description"
.PP 
Libncurses library\&. 
.SH "Member Function Documentation"
.PP 
.SS "float Arcade::Display::Ncurses::getDelta () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the number of frames since last update\&. 
.PP
\fBReturns:\fP
.RS 4
float Frame count 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "char Arcade::Display::Ncurses::getKeyCode () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Gets the last pressed character from the keyboard\&. 
.PP
\fBReturns:\fP
.RS 4
\\0 if nothing was pressed, \\b if backspace was pressed, \\n if return was pressed, otherwise, a character\&. 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::isKeyPressed (\fBIDisplayModule::Keys\fP key) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether the current key is being pressed\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key 
.RE
.PP
\fBReturns:\fP
.RS 4
true Key is pressed 
.PP
false Key is not pressed 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::isKeyPressedOnce (\fBIDisplayModule::Keys\fP key) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether the current key was pressed during the last frame\&. 
.PP
\fBParameters:\fP
.RS 4
\fIkey\fP The key 
.RE
.PP
\fBReturns:\fP
.RS 4
true Key is pressed 
.PP
false Key is not pressed 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::isOpen () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Check window status\&. 
.PP
\fBReturns:\fP
.RS 4
true Window is open 
.PP
false Window is closed 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putCircle (float x, float y, float rad) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays a cirle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinates 
.br
\fIy\fP Y coordinates 
.br
\fIrad\fP Radius of the circle 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putFillCircle (float x, float y, float rad) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays a filled cirle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinates 
.br
\fIy\fP Y coordinates 
.br
\fIrad\fP Radius of the circle 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putFillRect (float x, float y, float w, float h) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays a filled rectangle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinates 
.br
\fIy\fP Y coordinates 
.br
\fIw\fP Width of the rectangle 
.br
\fIh\fP Height of the rectangle 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putLine (float x1, float y1, float x2, float y2) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays a line\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx1\fP X coordinates for the first point 
.br
\fIy1\fP Y coordinates for the first point 
.br
\fIx2\fP X coordinates for the second point 
.br
\fIy2\fP Y coordinates for the second point 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putPixel (float x, float y) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays a pixel\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinates 
.br
\fIy\fP Y coordinates 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putRect (float x, float y, float w, float h) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays a rectangle\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinates 
.br
\fIy\fP Y coordinates 
.br
\fIw\fP Width of the rectangle 
.br
\fIh\fP Height of the rectangle 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::putText (const std::string & text, unsigned int size, float x, float y) const\fC [final]\fP, \fC [virtual]\fP"

.PP
Displays text\&. 
.PP
\fBParameters:\fP
.RS 4
\fItext\fP The text content 
.br
\fIsize\fP The text size 
.br
\fIx\fP X coordinates 
.br
\fIy\fP Y coordinates 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "void Arcade::Display::Ncurses::setColor (\fBIDisplayModule::Colors\fP color)\fC [final]\fP, \fC [virtual]\fP"

.PP
Defines the color of the elements that will be drawn\&. 
.PP
\fBParameters:\fP
.RS 4
\fIcolor\fP The color 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::shouldBeRestarted () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to restart the current game\&. 
.PP
\fBReturns:\fP
.RS 4
true Restart the game 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::shouldExit () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to exit the program\&. 
.PP
\fBReturns:\fP
.RS 4
true Exit the program 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::shouldGoToMenu () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to go back to the menu\&. 
.PP
\fBReturns:\fP
.RS 4
true Go back to menu 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::switchToNextGame () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to change the current game library\&. 
.PP
\fBReturns:\fP
.RS 4
true Switch to next available library 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::switchToNextLib () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to change the current display library\&. 
.PP
\fBReturns:\fP
.RS 4
true Switch to next available library 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::switchToPreviousGame () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to change the current game library\&. 
.PP
\fBReturns:\fP
.RS 4
true Switch to previous available library 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.
.SS "bool Arcade::Display::Ncurses::switchToPreviousLib () const\fC [final]\fP, \fC [virtual]\fP"

.PP
Checks whether you need to change the current display library\&. 
.PP
\fBReturns:\fP
.RS 4
true Switch to previous available library 
.PP
false Do nothing 
.RE
.PP

.PP
Implements \fBArcade::Display::IDisplayModule\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Arcade from the source code\&.
